class rbnode(object):
    def __init__(self, key):
        "Construct."
        self._key = key
        self._red = False
        self._left = None
        self._right = None
        self._p = None

    key = property(fget=lambda self: self._key, doc="The node's key")
    red = property(fget=lambda self: self._red, doc="Is the node red?")
    left = property(fget=lambda self: self._left, doc="The node's left child")
    right = property(fget=lambda self: self._right, doc="The node's right child")
    p = property(fget=lambda self: self._p, doc="The node's parent")

    def __str__(self):
        "String representation."
        return str(self.key)

    def __repr__(self):
        "String representation."
        return str(self.key)

class rbtree(object):
    def __init__(self, create_node=rbnode):
        self._nil = create_node(key=None)
        "Our nil node, used for all leaves."
        self._root = self.nil
        "The root of the tree."
        self._create_node = create_node
        "A callable that creates a node."

    root = property(fget=lambda self: self._root, doc="The tree's root node")
    nil = property(fget=lambda self: self._nil, doc="The tree's nil node")

    def search(self, key, x=None):
        if None == x:
            x = self.root
        while x != self.nil and key != x.key.get('ID'):
            if '%s' %key < x.key.get('ID'):
                x = x.left
            else:
                x = x.right
        return x


    def minimum(self, x=None):
        if None == x:
            x = self.root
        while x.left != self.nil:
            x = x.left
        return x


    def maximum(self, x=None):
        if None == x:
            x = self.root
        while x.right != self.nil:
            x = x.right
        return x

    def insert_key(self, key):
        "Insert the key into the tree."
        self.insert_node(self._create_node(key=key))

    def insert_node(self, z):
        "Insert node z into the tree."
        y = self.nil
        x = self.root
        while x != self.nil:
            y = x
            if z.key.get('ID')< x.key.get('ID'):
                x = x.left
            else:
                x = x.right
        z._p = y
        if y == self.nil:
            self._root = z
        elif z.key.get('ID') < y.key.get('ID'):
            y._left = z
        else:
            y._right = z
        z._left = self.nil
        z._right = self.nil
        z._red = True
        self._insert_fixup(z)

    def _insert_fixup(self, z):
        "Restore red-black properties after insert."
        while z.p.red:
            if z.p == z.p.p.left:
                y = z.p.p.right
                if y.red:
                    z.p._red = False
                    y._red = False
                    z.p.p._red = True
                    z = z.p.p
                else:
                    if z == z.p.right:
                        z = z.p
                        self._left_rotate(z)
                    z.p._red = False
                    z.p.p._red = True
                    self._right_rotate(z.p.p)
            else:
                y = z.p.p.left
                if y.red:
                    z.p._red = False
                    y._red = False
                    z.p.p._red = True
                    z = z.p.p
                else:
                    if z == z.p.left:
                        z = z.p
                        self._right_rotate(z)
                    z.p._red = False
                    z.p.p._red = True
                    self._left_rotate(z.p.p)
        self.root._red = False


    def _left_rotate(self, x):
        "Left rotate x."
        y = x.right
        x._right = y.left
        if y.left != self.nil:
            y.left._p = x
        y._p = x.p
        if x.p == self.nil:
            self._root = y
        elif x == x.p.left:
            x.p._left = y
        else:
            x.p._right = y
        y._left = x
        x._p = y


    def _right_rotate(self, y):
        "Left rotate y."
        x = y.left
        y._left = x.right
        if x.right != self.nil:
            x.right._p = y
        x._p = y.p
        if y.p == self.nil:
            self._root = x
        elif y == y.p.right:
            y.p._right = x
        else:
            y.p._left = x
        x._right = y
        y._p = x

user = open('C:\\Users\\유현담\\Desktop\\user.txt','r')

cnt1 = 0

while True:
    line1 = user.readline()
    line2 = user.readline()
    line3 = user.readline()

    line1 = line1[:-1]
    line3 = line3[:-1]

    user.readline()

    cnt1 = cnt1 + 1


    if not line2:break

total_user = cnt1

friend = open('C:\\Users\\유현담\\Desktop\\friend.txt','r')

cnt2 = 0

while True:
    line1 = friend.readline()
    line2 = friend.readline()

    line1 = line1[:-1]
    line2 = line2[:-1]

    friend.readline()
    cnt2 = cnt2+1

    if not line1:break

total_friendship = cnt2

word = open('C:\\Users\\유현담\\Desktop\\word.txt', 'r')

cnt3 = 0

rbtree = rbtree()

while True:
    userId = word.readline()
    line2 = word.readline()
    tweet = word.readline()

    userId = userId[:-1]
    tweet = tweet[:-1]

    word.readline()

    UserTweet = {'ID': tweet, 'User': userId}

    cnt3 = cnt3 + 1
    node = rbnode(UserTweet)
    rbtree.insert_node(node)


    if not line2: break

total_tweets = cnt3

while rbtree.inorder(rbtree) == None:
    TweetCnt = rbtree.inorder(rbtree)
    if

interface = """
    0. Read data files
    1. display statistics
    2. Top 5 most tweeted words
    3. Top 5 most tweeted users
    4. Find users who tweeted a word (e.g., 연세대)
    5. Find all people who are friends of the above users
    6. Delete all mentions of a word
    7. Delete all users who mentioned a word
    8. Find strongly connected components
    9. Find shortest path from a given user
    99. Quit
    Select Menu :
    """
print(interface)

a = input()
a == 4

if a == 0:
    print("total_user : "+'%s' % total_user)
    print("total_friendship : "+'%s' % total_friendship )
    print("total tweets : "+'%s' % total_tweets)

elif a == 1:
    print("Average Friend : "+ (total_friendship/total_user))
    print("Minimum Friend")
    print("Maximum Friend")
    print("\n")
    print("Average Tweet number : "+ (total_tweets/total_user))
    print("Minimum Tweet number : ")
    print("Maximum Tweet number : ")

elif a == 4:
    temp = input("단어를 입력하세요")
    findWord = rbtree.search(temp)
    print(findWord)

elif a == 7:
    temp = input("단어를 입력하세요")
    findWord = rbtree.search(temp)

    if findWord == None:
        print("그런 유저가 없습니다.")
